<configuration scan="true" debug="false">
	<!-- 配置属性由System.setProperty注入实现动态配置，这样可以在项目中不用配置该文件只需配置日志参数便可使用，做为默板使用 -->
	<springProperty scope="context" name="logback.logpath" source="logback.logpath" />
	<springProperty scope="context" name="logback.rootLoggerLevel" source="logback.rootLoggerLevel" />
	<springProperty scope="context" name="logback.maxFileSize" source="logback.maxFileSize" />
	<property name="logback.encoding" value="UTF-8" />
	<!-- 统一日志格式输出用|分隔方便 elk日志工具收集处理 ,默认日志格式是 时间|级别|日志戳|代码路径（error才打印）|日志内容|请求商户|请求业务|处理结果|处理耗时 -->
	<property name="logback.pattern"
		value="%date{yyyy-MM-dd HH:mm:ss.SSS}|%-5level|%logPreFix|%class.%method:%line|%sensitiveMsg%n" />
	<!-- 错误日志输出格式, 默认日志格式是 时间|级别|日志戳|代码路径（error才打印）|日志内容 -->
	<property name="logback.pattern.error"
		value="%date{yyyy-MM-dd HH:mm:ss.SSS}|%-5level|%logPreFix|%class.%method:%line|%sensitiveMsg%n" />

	<!-- 设置写日志的组件 -->
	<appender name="stdout" class="yspay.log.logback.appender.ExtConsoleAppender">
		<encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
			<layout class="com.yspay.ysapp.benchmark.log.ExtLayout">
				<pattern>${logback.pattern}</pattern>
			</layout>
			<charset>${logback.encoding}</charset>
		</encoder>
	</appender>

	<appender name="DEBUG_FILE"
		class="yspay.log.logback.appender.ExtRollingFileAppender">
		<file>${logback.logpath}/debug.log</file>
		<!-- see https://logback.qos.ch/manual/filters.html -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!-- see https://logback.qos.ch/manual/appenders.html#SizeAndTimeBasedFNATP -->
		<rollingPolicy
			class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${logback.logpath}/debug.%d{yyyyMMdd}.%i.log
			</fileNamePattern>
			<maxFileSize>${logback.maxFileSize}</maxFileSize>
		</rollingPolicy>
		<encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
			<!-- see https://logback.qos.ch/manual/layouts.html -->
			<layout class="com.yspay.ysapp.benchmark.log.ExtLayout">
				<pattern>${logback.pattern.error}</pattern>
			</layout>
			<charset>${logback.encoding}</charset>
		</encoder>
	</appender>
	<appender name="INFO_FILE"
		class="yspay.log.logback.appender.ExtRollingFileAppender">
		<file>${logback.logpath}/info.log</file>
		<!-- see https://logback.qos.ch/manual/filters.html -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!-- see https://logback.qos.ch/manual/appenders.html#SizeAndTimeBasedFNATP -->
		<rollingPolicy
			class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${logback.logpath}/info.%d{yyyyMMdd}.%i.log
			</fileNamePattern>
			<maxFileSize>${logback.maxFileSize}</maxFileSize>
		</rollingPolicy>
		<encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
			<!-- see https://logback.qos.ch/manual/layouts.html -->
			<layout class="com.yspay.ysapp.benchmark.log.ExtLayout">
				<pattern>${logback.pattern}</pattern>
			</layout>
			<charset>${logback.encoding}</charset>
		</encoder>
	</appender>
	<appender name="ERROR_FILE"
		class="yspay.log.logback.appender.ExtRollingFileAppender">
		<file>${logback.logpath}/error.log</file>
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>WARN</level>
		</filter>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${logback.logpath}/error.%d{yyyyMMdd}.%i.log
			</fileNamePattern>
			<maxFileSize>${logback.maxFileSize}</maxFileSize>
		</rollingPolicy>
		<encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
			<layout class="com.yspay.ysapp.benchmark.log.ExtLayout">
				<pattern>${logback.pattern.error}</pattern>
			</layout>
			<charset>${logback.encoding}</charset>
		</encoder>
	</appender>

	<!-- 用来设置某一个包或者某一个类的日志打印级别 -->
	<logger name="org.springframework" level="warn" />
	<logger name="com.alibaba.dubbo" level="info" />
	<logger name="org.I0Itec" level="info" />
	<logger name="org.apache" level="info" />
	<logger name="org.aspectj.weaver" level="warn" />
	<logger name="org.hibernate" level="OFF" />
	<logger name="com.mchange" level="OFF" />
	<logger name="java.sql.Connection" level="debug" />
	<logger name="java.sql.Statement" level="debug" />
	<logger name="java.sql.ResultSet" level="debug" />
	<logger name="java.sql.PreparedStatement" level="debug" />
	<logger name="org.apache.commons.httpclient" level="OFF" />
	<logger name="org.apache.commons.httpclient.Wire" level="OFF" />
	<logger name="httpclient" level="error" />
	<logger name="httpclient.wire.content" level="error" />
	<logger name="httpclient.wire.header" level="error" />

	<!-- 异步输出 -->  
     <appender name ="ASYNC" class= "ch.qos.logback.classic.AsyncAppender">  
            <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->  
            <discardingThreshold >0</discardingThreshold>  
            <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->  
            <queueSize>5</queueSize>   <!-- 异步日志，数据量过少的时候队列小一点方便即时输出 -->
            <!-- 添加附加的appender,最多只能添加一个 -->  
			<appender-ref ref="INFO_FILE" />
     </appender>  
       
	<root level="${logback.rootLoggerLevel}">
			<appender-ref ref="stdout" />
			<appender-ref ref="DEBUG_FILE" />
			<appender-ref ref="ERROR_FILE" />
			<appender-ref ref="INFO_FILE" />
			<!-- <appender-ref ref ="ASYNC"/> --> <!-- 异步日志，数据量过少输出出现不及时 -->
	</root>
</configuration>  
